// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(uuid())
  user_id           String  @map("user_id")
  type              String  @default("oauth")
  provider          String
  provider_id       String  @map("provider_id")
  refresh_token     String? @map("refresh_token")
  access_token      String? @map("access_token")
  expires_at        Int?    @map("expires_at")
  token_type        String? @map("token_type")
  scope             String?
  id_token          String? @map("id_token")
  session_state     String? @map("session_state")
  created_at        DateTime @default(now()) @map("created_at")
  user              User    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, provider_id])
  @@map("Account")
}

model Session {
  id            String   @id @default(uuid())
  session_token String   @unique @map("session_token")
  user_id       String   @map("user_id")
  expires       DateTime
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("Session")
}

model User {
  id                    String    @id @default(uuid())
  instance_id          String?   @db.Uuid
  email                String?   @unique
  encrypted_password   String?   @db.VarChar
  email_confirmed_at   DateTime?
  invited_at           DateTime?
  confirmation_token   String?   @db.VarChar
  confirmation_sent_at DateTime?
  recovery_token       String?   @db.VarChar
  recovery_sent_at     DateTime?
  email_change_token   String?   @db.VarChar
  email_change         String?   @db.VarChar
  email_change_sent_at DateTime?
  last_sign_in_at      DateTime?
  raw_app_meta_data    Json?
  raw_user_meta_data   Json?
  is_super_admin       Boolean?
  created_at           DateTime  @default(now())
  updated_at           DateTime  @updatedAt
  phone                String?
  phone_confirmed_at   DateTime?
  phone_change        String?   @db.VarChar
  phone_change_token   String?   @db.VarChar
  phone_change_sent_at DateTime?
  identities          Identity[]
  sessions            Session[]
  role                String    @default("STUDENT")
  accounts            Account[]
  studyPlans          StudyPlan[]
  createdCurriculums  Curriculum[]        @relation("CreatedCurriculums")
  curriculumProgress  CurriculumProgress[]
  recommendations     AIRecommendation[]

  @@map("users")
}

model Identity {
  id              String   @id @default(uuid())
  user_id         String   @db.Uuid
  identity_data   Json
  provider        String
  last_sign_in_at DateTime
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  email          String?
  user           User     @relation(fields: [user_id], references: [id])

  @@map("identities")
}

model VerificationToken {
  id         String   @id @default(uuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("VerificationToken")
}

model StudyPlan {
  id          String   @id @default(uuid())
  user_id     String   @map("user_id")
  subject     String
  content     String
  target      Int      @default(100)
  achievement Int      @default(0)
  date        DateTime @db.Date
  time_slot   String   @map("time_slot")
  reflection  String?
  created_at  DateTime @default(now()) @map("created_at")
  updated_at  DateTime @updatedAt @map("updated_at")
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("StudyPlan")
}

model Curriculum {
  id          String               @id @default(uuid())
  subject     String
  unit        String
  content     String
  order       Int
  created_by  String               @map("created_by")
  created_at  DateTime             @default(now()) @map("created_at")
  updated_at  DateTime             @updatedAt @map("updated_at")
  creator     User                 @relation("CreatedCurriculums", fields: [created_by], references: [id], onDelete: Cascade)
  progress    CurriculumProgress[]

  @@map("Curriculum")
}

model CurriculumProgress {
  id             String     @id @default(uuid())
  user_id        String     @map("user_id")
  curriculum_id  String     @map("curriculum_id")
  progress       Int
  last_updated   DateTime   @default(now()) @map("last_updated")
  curriculum     Curriculum @relation(fields: [curriculum_id], references: [id], onDelete: Cascade)
  user           User       @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, curriculum_id])
  @@map("CurriculumProgress")
}

model AIRecommendation {
  id         String             @id @default(uuid())
  user_id    String             @map("user_id")
  subject    String
  content    String
  type       RecommendationType
  created_at DateTime           @default(now()) @map("created_at")
  user       User               @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("AIRecommendation")
}

enum UserRole {
  STUDENT
  ADMIN
  TEACHER
}

enum RecommendationType {
  STRATEGY
  SCHEDULE
  SUBJECT
  UNIT
}
