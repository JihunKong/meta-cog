// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String               @id @default(cuid())
  name               String?
  email              String?              @unique
  emailVerified      DateTime?
  image              String?
  password           String?
  role               UserRole             @default(STUDENT)
  recommendations    AIRecommendation[]
  accounts           Account[]
  curriculum         Curriculum[]
  curriculumProgress CurriculumProgress[]
  sessions           Session[]
  studyPlans         StudyPlan[]
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model StudyPlan {
  id          String   @id @default(cuid())
  userId      String
  subject     String
  content     String
  target      Float
  achievement Float    @default(0)
  date        DateTime
  timeSlot    String
  reflection  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Curriculum {
  id        String               @id @default(cuid())
  subject   String
  unit      String
  content   String
  order     Int
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  createdBy String
  creator   User                 @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  progress  CurriculumProgress[]
}

model CurriculumProgress {
  id           String     @id @default(cuid())
  userId       String
  curriculumId String
  progress     Int
  lastUpdated  DateTime   @default(now())
  curriculum   Curriculum @relation(fields: [curriculumId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, curriculumId])
}

model AIRecommendation {
  id        String             @id @default(cuid())
  userId    String
  subject   String
  content   String
  type      RecommendationType
  createdAt DateTime           @default(now())
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  STUDENT
  ADMIN
  TEACHER
}

enum RecommendationType {
  STRATEGY
  SCHEDULE
  SUBJECT
  UNIT
}
