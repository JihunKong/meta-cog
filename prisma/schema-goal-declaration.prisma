// 목표 선언 시스템을 위한 Prisma 스키마 확장

// 기존 User 모델에 추가할 관계들:
// goalDeclarations    GoalDeclaration[]   @relation("UserGoalDeclarations")
// supportedGoals      GoalSupport[]       @relation("GoalSupporter")
// goalComments        GoalComment[]       @relation("GoalCommenter") 
// evidencePhotos      GoalEvidence[]      @relation("EvidenceUploader")

// 목표 선언 메인 모델
model GoalDeclaration {
  id              String   @id @default(uuid())
  user_id         String   @map("user_id")
  title           String   // "오늘 수학 3시간 완주!"
  description     String   @db.Text // 구체적인 목표 설명
  subject         String   // 과목 (국어, 영어, 수학, 과학, 사회)
  target_type     GoalTargetType // 시간, 문제수, 페이지수 등
  target_amount   Int      // 목표량 (3시간 = 180분)
  target_unit     String   // 단위 (분, 문제, 페이지)
  target_date     DateTime @db.Date // 목표 달성 예정일
  deadline_time   DateTime? // 구체적인 마감 시간
  difficulty      GoalDifficulty @default(MEDIUM) // 목표 난이도
  is_public       Boolean  @default(true) // 공개 여부
  is_group_goal   Boolean  @default(false) // 그룹 목표 여부
  motivation      String?  @db.Text // 동기/이유
  reward          String?  // 달성 시 자신에게 줄 보상
  
  // 상태 관리
  status          GoalStatus @default(DECLARED)
  progress        Int      @default(0) // 진행률 (0-100)
  actual_amount   Int      @default(0) // 실제 달성량
  
  // 타임스탬프
  declared_at     DateTime @default(now()) @map("declared_at")
  started_at      DateTime? @map("started_at")
  completed_at    DateTime? @map("completed_at")
  updated_at      DateTime @updatedAt @map("updated_at")
  
  // 관계
  user            User           @relation("UserGoalDeclarations", fields: [user_id], references: [id], onDelete: Cascade)
  supports        GoalSupport[]  @relation("GoalSupports")
  comments        GoalComment[]  @relation("GoalComments")
  evidence        GoalEvidence[] @relation("GoalEvidence")
  updates         GoalUpdate[]   @relation("GoalUpdates")
  
  // 인덱스
  @@index([user_id])
  @@index([target_date])
  @@index([status])
  @@index([is_public])
  @@map("GoalDeclaration")
}

// 목표 응원/지지 시스템
model GoalSupport {
  id              String   @id @default(uuid())
  goal_id         String   @map("goal_id")
  supporter_id    String   @map("supporter_id")
  support_type    SupportType @default(CHEER) // 응원, 함께하기, 도움주기
  message         String?  @db.Text // 응원 메시지
  is_anonymous    Boolean  @default(false) // 익명 응원
  created_at      DateTime @default(now()) @map("created_at")
  
  goal            GoalDeclaration @relation("GoalSupports", fields: [goal_id], references: [id], onDelete: Cascade)
  supporter       User            @relation("GoalSupporter", fields: [supporter_id], references: [id], onDelete: Cascade)
  
  @@unique([goal_id, supporter_id]) // 한 목표당 한 번만 응원
  @@map("GoalSupport")
}

// 목표 댓글 시스템
model GoalComment {
  id              String   @id @default(uuid())
  goal_id         String   @map("goal_id")
  commenter_id    String   @map("commenter_id")
  content         String   @db.Text
  comment_type    CommentType @default(COMMENT) // 댓글, 조언, 경험공유
  parent_id       String?  @map("parent_id") // 대댓글용
  is_pinned       Boolean  @default(false) // 고정 댓글 (목표 작성자가 고정)
  created_at      DateTime @default(now()) @map("created_at")
  updated_at      DateTime @updatedAt @map("updated_at")
  
  goal            GoalDeclaration @relation("GoalComments", fields: [goal_id], references: [id], onDelete: Cascade)
  commenter       User            @relation("GoalCommenter", fields: [commenter_id], references: [id], onDelete: Cascade)
  parent          GoalComment?    @relation("CommentReplies", fields: [parent_id], references: [id])
  replies         GoalComment[]   @relation("CommentReplies")
  
  @@index([goal_id])
  @@index([created_at])
  @@map("GoalComment")
}

// 목표 인증/증거 시스템
model GoalEvidence {
  id              String   @id @default(uuid())
  goal_id         String   @map("goal_id")
  uploader_id     String   @map("uploader_id")
  evidence_type   EvidenceType // 사진, 스크린샷, 텍스트, 타이머
  file_url        String?  // 이미지/파일 URL
  description     String   @db.Text // 인증 설명
  verified_amount Int?     // 인증된 진행량
  timestamp       DateTime @default(now()) // 인증 시점
  is_verified     Boolean  @default(false) // 교사/시스템 검증 여부
  verified_by     String?  @map("verified_by") // 검증자 ID
  verified_at     DateTime? @map("verified_at")
  
  goal            GoalDeclaration @relation("GoalEvidence", fields: [goal_id], references: [id], onDelete: Cascade)
  uploader        User            @relation("EvidenceUploader", fields: [uploader_id], references: [id], onDelete: Cascade)
  
  @@index([goal_id])
  @@index([timestamp])
  @@map("GoalEvidence")
}

// 목표 진행 업데이트
model GoalUpdate {
  id              String   @id @default(uuid())
  goal_id         String   @map("goal_id")
  update_type     UpdateType // 시작, 진행, 완료, 포기, 연장
  progress_amount Int      // 이번 업데이트에서 추가된 진행량
  total_progress  Int      // 누적 진행률 (0-100)
  message         String?  @db.Text // 업데이트 메시지
  mood            MoodType? // 기분 상태
  difficulty_felt DifficultyLevel? // 느낀 난이도
  created_at      DateTime @default(now()) @map("created_at")
  
  goal            GoalDeclaration @relation("GoalUpdates", fields: [goal_id], references: [id], onDelete: Cascade)
  
  @@index([goal_id])
  @@index([created_at])
  @@map("GoalUpdate")
}

// 목표 템플릿 (인기있는 목표 패턴)
model GoalTemplate {
  id              String   @id @default(uuid())
  title           String
  description     String   @db.Text
  subject         String
  target_type     GoalTargetType
  recommended_amount Int
  recommended_unit String
  difficulty      GoalDifficulty
  tags            String[] // 검색용 태그
  usage_count     Int      @default(0) // 사용 횟수
  success_rate    Float    @default(0) // 성공률
  created_by      String?  @map("created_by") // 생성자 (교사/시스템)
  is_active       Boolean  @default(true)
  created_at      DateTime @default(now()) @map("created_at")
  
  @@index([subject])
  @@index([usage_count])
  @@map("GoalTemplate")
}

// 목표 도전 그룹 (같은 목표를 함께 하는 그룹)
model GoalChallenge {
  id              String   @id @default(uuid())
  title           String   // "함께 수학 정복하기"
  description     String   @db.Text
  creator_id      String   @map("creator_id")
  max_participants Int     @default(10)
  start_date      DateTime
  end_date        DateTime
  challenge_type  ChallengeType // 개인목표모음, 팀목표, 경쟁
  is_public       Boolean  @default(true)
  entry_code      String?  @unique // 참가 코드
  
  participants    GoalChallengeParticipant[]
  
  @@index([start_date])
  @@index([end_date])
  @@map("GoalChallenge")
}

model GoalChallengeParticipant {
  id              String   @id @default(uuid())
  challenge_id    String   @map("challenge_id")
  user_id         String   @map("user_id")
  goal_id         String?  @map("goal_id") // 이 도전을 위한 목표
  joined_at       DateTime @default(now()) @map("joined_at")
  
  challenge       GoalChallenge   @relation(fields: [challenge_id], references: [id], onDelete: Cascade)
  participant     User            @relation("ChallengeParticipant", fields: [user_id], references: [id], onDelete: Cascade)
  goal            GoalDeclaration? @relation("ChallengeGoal", fields: [goal_id], references: [id])
  
  @@unique([challenge_id, user_id])
  @@map("GoalChallengeParticipant")
}

// Enums
enum GoalStatus {
  DECLARED    // 선언됨
  IN_PROGRESS // 진행중
  COMPLETED   // 완료
  FAILED      // 실패
  ABANDONED   // 포기
  EXTENDED    // 연장
}

enum GoalTargetType {
  TIME        // 시간 (분)
  PROBLEMS    // 문제수
  PAGES       // 페이지수
  SESSIONS    // 세션수
  CUSTOM      // 사용자 정의
}

enum GoalDifficulty {
  EASY
  MEDIUM
  HARD
  EXPERT
}

enum SupportType {
  CHEER       // 응원하기
  JOIN        // 함께하기
  HELP        // 도움주기
  MENTOR      // 멘토링
}

enum CommentType {
  COMMENT     // 일반 댓글
  ADVICE      // 조언
  EXPERIENCE  // 경험 공유
  QUESTION    // 질문
}

enum EvidenceType {
  PHOTO       // 사진
  SCREENSHOT  // 스크린샷
  TEXT        // 텍스트 인증
  TIMER       // 타이머 기록
  DOCUMENT    // 문서/파일
}

enum UpdateType {
  START       // 시작
  PROGRESS    // 진행
  COMPLETE    // 완료
  PAUSE       // 일시정지
  RESUME      // 재개
  ABANDON     // 포기
  EXTEND      // 연장
}

enum MoodType {
  EXCITED     // 신남
  FOCUSED     // 집중
  TIRED       // 피곤
  FRUSTRATED  // 답답
  SATISFIED   // 만족
  WORRIED     // 걱정
}

enum DifficultyLevel {
  TOO_EASY    // 너무 쉬움
  JUST_RIGHT  // 적당함
  CHALLENGING // 도전적
  TOO_HARD    // 너무 어려움
}

enum ChallengeType {
  INDIVIDUAL  // 개인 목표 모음
  TEAM        // 팀 목표
  COMPETITION // 경쟁
}