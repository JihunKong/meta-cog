"use client";

import { useState, useEffect } from "react";
import { 
  Box, Typography, Button, Alert, CircularProgress, Dialog, DialogTitle, 
  DialogContent, DialogActions, FormControl, InputLabel, Select, MenuItem,
  TextField, Slider
} from "@mui/material";
import AddIcon from "@mui/icons-material/Add";
import { getFirebaseInstance } from "@/lib/firebase";
import { 
  collection, addDoc, getDocs, doc, updateDoc, deleteDoc, 
  query, where, orderBy, Timestamp, serverTimestamp 
} from "firebase/firestore";
import {
  getAuth,
  signOut,
  onAuthStateChanged,
  User
} from "firebase/auth";
import SessionList from "./SessionList";

// 과목 목록
const SUBJECTS = ["국어", "영어", "수학", "과학", "사회"];

// 세션 인터페이스
interface Session {
  id: string;
  user_id: string;
  subject: string;
  description: string;
  percent: number;
  reflection: string;
  created_at: string;
  progress_id?: string;
}

interface SessionManagerProps {
  sessions: Session[];
  setSessions: React.Dispatch<React.SetStateAction<Session[]>>;
}

export default function SessionManager({
  sessions,
  setSessions
}: SessionManagerProps) {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [editingSessionId, setEditingSessionId] = useState<string | null>(null);
  const [currentSession, setCurrentSession] = useState<Session | null>(null);
  const [newSessionData, setNewSessionData] = useState<{
    subject: string;
    description: string;
  }>({ subject: SUBJECTS[0], description: "" });
  const [editField, setEditField] = useState<{
    subject: string;
    description: string;
    percent: number;
    reflection: string;
  }>({ subject: "", description: "", percent: 0, reflection: "" });

  // Firebase 인스턴스 가져오기
  const { db, auth: firebaseAuth } = getFirebaseInstance();
  const auth = getAuth();
  const [currentUser, setCurrentUser] = useState<User | null>(null);
  
  // Firebase 인증 상태 감시 및 관리
  useEffect(() => {
    // 인증 상태 디버깅
    console.log('Firebase 인증 상태 초기값:', {
      'auth.currentUser': auth?.currentUser,
      'firebaseAuth.currentUser': firebaseAuth?.currentUser
    });
    
    // 인증 상태 변경 리스너 설정
    const unsubscribe = onAuthStateChanged(auth, (user: User | null) => {
      console.log('Firebase 인증 상태 변경:', user ? `${user.email} (${user.uid})` : '로그아웃 상태');
      setCurrentUser(user);
    });
    
    // 컴포넌트 언마운트 시 리스너 해제
    return () => unsubscribe();
  }, [auth, firebaseAuth]);

  // 기존 로컬 스토리지 데이터 마이그레이션 (한 번만 실행)
  useEffect(() => {
    // 모든 세션에 대해 로컬 스토리지에서 로드된 기존 데이터가 있는지 확인용
    const migrateLocalData = async () => {
      // 기존 세션들에 대해 진행도 데이터가 없는 경우만 로컬 스토리지 확인
      for (const session of sessions) {
        if (session.percent === 0 && session.reflection === '') {
          const sessionDataKey = `session_data_${session.id}`;
          const savedData = localStorage.getItem(sessionDataKey);
          
          if (savedData) {
            try {
              const parsedData = JSON.parse(savedData);
              const percent = parsedData.percent || 0;
              const reflection = parsedData.reflection || "";
              
              // 이전 데이터가 있다면 Firebase에 저장
              if (percent > 0 || reflection) {
                console.log('로컬 데이터 마이그레이션:', session.id);
                await syncProgressToDatabase(session.id, percent, reflection);
              }
            } catch (e) {
              console.error('JSON 파싱 오류:', e);
            }
          }
        }
      }
    };
    
    // 로컬 스토리지 데이터를 Firebase로 마이그레이션
    const syncProgressToDatabase = async (sessionId: string, percent: number, reflection: string) => {
      try {
        if (!auth.currentUser) {
          console.error('인증된 사용자가 없습니다.');
          return;
        }

        // Firebase에 progress 데이터 추가
        const progressRef = collection(db, 'progress');
        const progressData = {
          session_id: sessionId,
          user_id: auth.currentUser.uid,
          percent,
          reflection,
          created_at: serverTimestamp()
        };

        // 데이터 추가 후 ID 반환
        const progressDoc = await addDoc(progressRef, progressData);
        
        // 로컬 스토리지 클리어 (마이그레이션 완료)
        localStorage.removeItem(`session_data_${sessionId}`);
        
        // 세션 데이터 업데이트
        const updatedSessions = sessions.map(s => {
          if (s.id === sessionId) {
            return {
              ...s,
              percent,
              reflection,
              progress_id: progressDoc.id
            };
          }
          return s;
        });
        
        setSessions(updatedSessions);
      } catch (error: any) {
        console.error('Firebase에 진행 상황 저장 중 오류:', error.message || error);
      }
    };

    migrateLocalData();
  }, [sessions, db, auth, setSessions]);

  // 다이얼로그 열기
  const handleOpenDialog = () => {
    setIsDialogOpen(true);
    setNewSessionData({ subject: SUBJECTS[0], description: "" });
  };

  // 다이얼로그 닫기
  const handleCloseDialog = () => {
    setIsDialogOpen(false);
    setError("");
  };

  // 새 세션 추가
  const handleAddSession = async () => {
    // 입력 유효성 검사
    if (!newSessionData.subject || !newSessionData.description) {
      setError("과목과 설명을 모두 입력해주세요.");
      return;
    }

    setLoading(true);
    setError("");

    try {
      // 인증 상태 확인 상세 디버깅
      console.log('handleAddSession 인증 상태:', {
        stateCurrentUser: currentUser ? `${currentUser.email} (${currentUser.uid})` : '없음',
        authCurrentUser: auth?.currentUser ? `${auth.currentUser.email} (${auth.currentUser.uid})` : '없음'
      });
      
      if (!currentUser) {
        throw new Error("인증된 사용자가 없습니다. 다시 로그인해주세요.");
      }

      // 사용자 ID 디버깅
      console.log('User ID for new session:', currentUser.uid);

      // Firebase에 새 세션 추가
      const sessionsRef = collection(db, 'sessions');
      const sessionData = {
        user_id: currentUser.uid,
        subject: newSessionData.subject,
        description: newSessionData.description,
        percent: 0,
        reflection: "",
        created_at: serverTimestamp()
      };

      console.log('Adding session with data:', {
        ...sessionData,
        user_id: `${sessionData.user_id} (${currentUser.email})`
      });
      const docRef = await addDoc(sessionsRef, sessionData);
      console.log('Session added with ID:', docRef.id);
      
      // 새로 생성된 세션 데이터 추가
      const newSession: Session = {
        id: docRef.id,
        user_id: currentUser.uid,
        subject: newSessionData.subject,
        description: newSessionData.description,
        percent: 0,
        reflection: "",
        created_at: new Date().toISOString()
      };

      setSessions([newSession, ...sessions]);
      handleCloseDialog();
    } catch (error: any) {
      // 오류 객체 디테일 출력 개선
      console.error("세션 추가 오류:", error);
      if (error instanceof Error) {
        console.error("Error name:", error.name);
        console.error("Error message:", error.message);
        console.error("Error stack:", error.stack);
      }
      const errorMsg = error?.message || JSON.stringify(error) || "세션을 추가하는 중 알 수 없는 오류가 발생했습니다.";
      setError(errorMsg);
    } finally {
      setLoading(false);
    }
  };

  // 세션 편집 모드 열기
  const handleOpenEdit = (sessionId: string) => {
    const session = sessions.find(s => s.id === sessionId);
    if (session) {
      setEditingSessionId(sessionId);
      setCurrentSession(session);
      setEditField({
        subject: session.subject,
        description: session.description,
        percent: session.percent || 0,
        reflection: session.reflection || ""
      });
    }
  };

  // 세션 편집 모드 닫기
  const handleCloseEdit = () => {
    setEditingSessionId(null);
    setCurrentSession(null);
  };

  // 세션 수정 저장
  const handleSaveEdit = async (sessionId: string, data: any) => {
    setLoading(true);
    setError("");

    try {
      // 인증 상태 확인 및 디버깅
      console.log('handleSaveEdit 인증 상태:', {
        stateCurrentUser: currentUser ? `${currentUser.email} (${currentUser.uid})` : '없음',
        sessionId: sessionId,
        dataToUpdate: data
      });
      
      if (!currentUser) {
        throw new Error("인증된 사용자가 없습니다. 다시 로그인해주세요.");
      }

      // Firebase에서 세션 업데이트
      const sessionRef = doc(db, 'sessions', sessionId);
      const updateData = {
        subject: data.subject,
        description: data.description,
        updated_at: serverTimestamp()
      };
      
      console.log('Updating session document:', { sessionId, updateData });
      await updateDoc(sessionRef, updateData);
      console.log('Session document updated successfully');

      // 진행률과 반성 내용이 변경된 경우 progress 컬렉션 업데이트
      if (currentSession && 
          (data.percent !== currentSession.percent || 
           data.reflection !== currentSession.reflection)) {
        
        // progress 컬렉션에 추가
        const progressRef = collection(db, 'progress');
        const progressData = {
          session_id: sessionId,
          user_id: currentUser.uid,
          percent: data.percent,
          reflection: data.reflection,
          created_at: serverTimestamp()
        };
        
        console.log('Adding progress document:', progressData);
        const progressDoc = await addDoc(progressRef, progressData);
        console.log('Progress document added with ID:', progressDoc.id);

        // 로컬 스토리지 데이터 삭제
        localStorage.removeItem(`session_data_${sessionId}`);
      }

      // 세션 목록 업데이트
      const updatedSessions = sessions.map(s => {
        if (s.id === sessionId) {
          return {
            ...s,
            subject: data.subject,
            description: data.description,
            percent: data.percent,
            reflection: data.reflection
          };
        }
        return s;
      });

      setSessions(updatedSessions);
      handleCloseEdit();
    } catch (error: any) {
      // 오류 객체 디테일 출력 개선
      console.error("세션 수정 오류:", error);
      if (error instanceof Error) {
        console.error("Error name:", error.name);
        console.error("Error message:", error.message);
        console.error("Error stack:", error.stack);
      }
      const errorMsg = error?.message || JSON.stringify(error) || "세션을 수정하는 중 알 수 없는 오류가 발생했습니다.";
      setError(errorMsg);
    } finally {
      setLoading(false);
    }
  };

  // 세션 삭제
  const handleDeleteSession = async (sessionId: string) => {
    if (!window.confirm("정말 이 세션을 삭제하시겠습니까?")) {
      return;
    }

    setLoading(true);

    try {
    }

    // Firebase에서 세션 삭제
    const sessionRef = doc(db, 'sessions', sessionId);
    console.log('Deleting session document:', sessionId);
    await deleteDoc(sessionRef);
    console.log('Session document deleted successfully');
    <Box>
      {/* 세션 추가 버튼 및 헤더 */}
      <Box sx={{ mb: 3, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
        <Typography variant="h5" component="h2">
          학습 세션 관리
        </Typography>
        <Button
          variant="contained"
          color="primary"
          startIcon={<AddIcon />}
          onClick={handleOpenDialog}
        >
          새 세션 추가
        </Button>
      </Box>

      {/* 세션 목록 */}
      <SessionList
        sessions={sessions}
        editingSessionId={editingSessionId}
        loading={loading}
        onEdit={handleOpenEdit}
        onDelete={handleDeleteSession}
        onUpdate={(sessionId, data) => handleSaveEdit(sessionId, data)}
      />

      {/* 세션 추가 다이얼로그 */}
      <Dialog open={isDialogOpen} onClose={handleCloseDialog} maxWidth="sm" fullWidth>
        <DialogTitle>새 학습 세션 추가</DialogTitle>
        <DialogContent>
          <Box component="form" noValidate sx={{ mt: 1 }}>
            <FormControl fullWidth margin="normal">
              <InputLabel id="subject-label">과목</InputLabel>
              <Select
                labelId="subject-label"
                value={newSessionData.subject}
                label="과목"
                onChange={(e) => setNewSessionData({...newSessionData, subject: e.target.value})}
              >
                {SUBJECTS.map((subject) => (
                  <MenuItem key={subject} value={subject}>
                    {subject}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>
            <TextField
              margin="normal"
              required
              fullWidth
              label="학습 목표"
              value={newSessionData.description}
              onChange={(e) => setNewSessionData({...newSessionData, description: e.target.value})}
              multiline
              rows={2}
              error={!!error}
              helperText={error || "구체적인 학습 목표를 작성해주세요. (예: '영어 단어 50개 외우기')"}
            />
          </Box>
        </DialogContent>
        <DialogActions>
          <Button onClick={handleCloseDialog} color="inherit">
            취소
          </Button>
          <Button 
            onClick={handleAddSession} 
            color="primary" 
            variant="contained"
            disabled={loading}
          >
            {loading ? <CircularProgress size={24} color="inherit" /> : "추가"}
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
}
