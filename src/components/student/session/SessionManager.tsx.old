"use client";

import { useState, useEffect } from "react";
import { 
  Box, Typography, Button, Alert, CircularProgress, Dialog, DialogTitle, 
  DialogContent, DialogActions, FormControl, InputLabel, Select, MenuItem,
  TextField, Slider
} from "@mui/material";
import AddIcon from "@mui/icons-material/Add";
import { getFirebaseInstance } from "@/lib/firebase";
import { collection, addDoc, getDocs, doc, updateDoc, deleteDoc, query, where, orderBy, Timestamp, serverTimestamp } from "firebase/firestore";
import { getAuth } from "firebase/auth";
import SessionList from "./SessionList";

// 과목 목록
const SUBJECTS = ["국어", "영어", "수학", "과학", "사회"];

// 학습 목표 인터페이스
interface Goal {
  id: string;
  user_id: string;
  subject: string; // 과목
  description: string; // 목표 설명
  created_at: string;
  updated_at?: string;
}

// 목표 진행 상황 인터페이스
interface Progress {
  id: string;
  smart_goal_id: string;
  percent: number; // 달성률 (0-100)
  reflection: string; // 반성문
  created_at: string;
  updated_at?: string;
}

// 컴포넌트에서 사용할 통합 세션 인터페이스
interface Session {
  id: string; // 목표 ID
  user_id: string;
  subject: string;
  description: string;
  percent: number;
  reflection: string;
  created_at: string;
  progress_id?: string; // 연결된 진행 상황 ID (있는 경우)
}

interface SessionManagerProps {
  sessions: Session[];
  setSessions: React.Dispatch<React.SetStateAction<Session[]>>;
}

export default function SessionManager({
  sessions,
  setSessions
}: SessionManagerProps) {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [editingSessionId, setEditingSessionId] = useState<string | null>(null);
  const [currentSession, setCurrentSession] = useState<Session | null>(null);
  const [newSessionData, setNewSessionData] = useState<{
    subject: string;
    description: string;
  }>({ subject: SUBJECTS[0], description: "" });
  const [editField, setEditField] = useState<{
    subject: string;
    description: string;
    percent: number;
    reflection: string;
  }>({ subject: "", description: "", percent: 0, reflection: "" });

  // 기존 로컬 스토리지 데이터 마이그레이션 (한 번만 실행)
  useEffect(() => {
    // 모든 세션에 대해 로컬 스토리지에서 로드된 기존 데이터가 있는지 확인용
    const migrateLocalData = async () => {
      // 기존 세션들에 대해 진행도 데이터가 없는 경우만 로컬 스토리지 확인
      for (const session of sessions) {
        if (session.percent === 0 && session.reflection === '') {
          const sessionDataKey = `session_data_${session.id}`;
          const savedData = localStorage.getItem(sessionDataKey);
          
          if (savedData) {
            try {
              const parsedData = JSON.parse(savedData);
              const percent = parsedData.percent || 0;
              const reflection = parsedData.reflection || "";
              
              // 이전 데이터가 있다면 goal_progress 테이블에 저장
              if (percent > 0 || reflection) {
                console.log('로컬 데이터 마이그레이션:', session.id);
                await syncProgressToDatabase(session.id, percent, reflection);
              }
            } catch (e) {
              console.error('JSON 파싱 오류:', e);
            }
          }
        }
      }
    };
    
    // 로컬 스토리지 데이터를 데이터베이스로 마이그레이션
    const syncProgressToDatabase = async (goalId: string, percent: number, reflection: string) => {
      try {
        const { data, error } = await supabase
          .from('goal_progress')
          .insert([{
            smart_goal_id: goalId,
            percent,
            reflection
          }])
          .select();
        
        if (error) throw error;
        
        // 로컬 스토리지 클리어 (마이그레이션 완료)
        localStorage.removeItem(`session_data_${goalId}`);
        
        // 세션 데이터 업데이트
        if (data && data.length > 0) {
          setSessions(sessions.map(s => 
            s.id === goalId ? 
            {
              ...s,
              percent,
              reflection,
              progress_id: data[0].id
            } : s
          ));
        }
      } catch (err) {
        console.error('마이그레이션 오류:', err);
      }
    };
    
    if (sessions.length > 0) {
      migrateLocalData();
    }
  }, [sessions.length]);

  // 세션 추가 핸들러 - 새로운 테이블 구조 사용
  const handleAddSession = async (sessionData: { subject: string; description: string }) => {
    try {
      setLoading(true);
      setError("");
      
      // 현재 로그인된 사용자 정보 가져오기
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) throw new Error("로그인 정보가 없습니다. 다시 로그인 해주세요.");
      
      // 1. 목표 정보 저장 (smart_goals 테이블)
      const { data: goalData, error: goalError } = await supabase
        .from('smart_goals')
        .insert([{
          user_id: user.id,
          subject: sessionData.subject,
          description: sessionData.description
        }])
        .select();

      if (goalError) {
        console.error('목표 생성 오류:', goalError);
        throw goalError;
      }
      
      if (!goalData || goalData.length === 0) {
        throw new Error('목표 생성 후 데이터를 가져올 수 없습니다.');
      }
      
      // 2. 목표 진행도 초기화 (goal_progress 테이블)
      const { data: progressData, error: progressError } = await supabase
        .from('goal_progress')
        .insert([{
          smart_goal_id: goalData[0].id,
          percent: 0,
          reflection: ''
        }])
        .select();
      
      // 진행도 저장 오류의 경우 실패로 처리하지 않음 (UI에는 표시만 해줌)
      if (progressError) {
        console.warn('진행도 초기화 오류:', progressError);
      }
      
      // 3. 새로운 세션 데이터 생성
      const newSession: Session = {
        id: goalData[0].id,
        user_id: goalData[0].user_id,
        subject: goalData[0].subject,
        description: goalData[0].description,
        percent: 0,
        reflection: '',
        created_at: goalData[0].created_at,
        progress_id: progressData && progressData.length > 0 ? progressData[0].id : undefined
      };
      
      // 4. UI 업데이트
      setSessions([newSession, ...sessions]);
      
      // 대화상자 닫기
      setIsDialogOpen(false);
      setNewSessionData({ subject: SUBJECTS[0], description: "" });
    } catch (err: any) {
      console.error("세션 추가 오류:", err.message);
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  // 세션 업데이트 핸들러 - 새로운 테이블 구조 사용
  const handleUpdateSession = async (id: string, updatedData: { subject: string; description: string; percent: number; reflection: string }) => {
    try {
      setLoading(true);
      setError("");
      
      // 업데이트할 세션 찾기
      const sessionToUpdate = sessions.find(s => s.id === id);
      if (!sessionToUpdate) {
        throw new Error("세션을 찾을 수 없습니다");
      }

      // 1. 목표 정보 업데이트 (smart_goals 테이블)
      const { error: goalError } = await supabase
        .from('smart_goals')
        .update({
          subject: updatedData.subject,
          description: updatedData.description,
          updated_at: new Date().toISOString()
        })
        .eq('id', id);

      if (goalError) {
        console.error('목표 업데이트 오류:', goalError);
        throw goalError;
      }
      
      // 2. 진행도 정보 업데이트 (goal_progress 테이블)
      let progressId = sessionToUpdate.progress_id;
      
      // 진행도 ID가 있는 경우 업데이트, 없는 경우 생성
      if (progressId) {
        // 기존 진행도 업데이트
        const { error: progressError } = await supabase
          .from('goal_progress')
          .update({
            percent: updatedData.percent,
            reflection: updatedData.reflection,
            updated_at: new Date().toISOString()
          })
          .eq('id', progressId);
          
        if (progressError) {
          console.error('진행도 업데이트 오류:', progressError);
          throw progressError;
        }
      } else {
        // 진행도 새로 생성
        const { data: progressData, error: progressError } = await supabase
          .from('goal_progress')
          .insert([{
            smart_goal_id: id,
            percent: updatedData.percent,
            reflection: updatedData.reflection
          }])
          .select();
          
        if (progressError) {
          console.error('진행도 생성 오류:', progressError);
          throw progressError;
        }
        
        if (progressData && progressData.length > 0) {
          progressId = progressData[0].id;
        }
      }
      
      // 3. 현재 세션 업데이트
      const updatedSession = {
        ...sessionToUpdate,
        subject: updatedData.subject,
        description: updatedData.description,
        percent: updatedData.percent,
        reflection: updatedData.reflection,
        progress_id: progressId
      };

      // 4. 로컬 세션 리스트 업데이트
      setSessions(sessions.map(s => s.id === id ? updatedSession : s));

      // 편집 모드 종료
      setEditingSessionId(null);
      setCurrentSession(null);
    } catch (err: any) {
      console.error("세션 업데이트 오류:", err.message);
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  // 삭제 확인 다이얼로그 상태
  const [deleteConfirmOpen, setDeleteConfirmOpen] = useState(false);
  const [deleteTargetId, setDeleteTargetId] = useState<string | null>(null);

  // 삭제 요청 시 다이얼로그 오픈
  const handleDeleteRequest = (id: string) => {
    setDeleteTargetId(id);
    setDeleteConfirmOpen(true);
  };

  // 실제 삭제 실행 - 새로운 테이블 구조 사용
  const handleDeleteSession = async () => {
    if (!deleteTargetId) return;
    try {
      setLoading(true);
      setError("");
      
      console.log('세션 삭제 시작:', deleteTargetId);
      
      // 1. 전체 goal_progress 데이터 먼저 조회
      const { data: progressData, error: fetchError } = await supabase
        .from('goal_progress')
        .select('id')
        .eq('smart_goal_id', deleteTargetId);
        
      if (fetchError) {
        console.error('goal_progress 데이터 조회 오류:', fetchError);
      } else {
        console.log(`${progressData?.length || 0}개의 연결된 progress 항목 발견`);
        
        // 2. 관련 progress 데이터가 있는 경우 먼저 삭제
        if (progressData && progressData.length > 0) {
          // 각 progress 항목 삭제
          for (const progress of progressData) {
            console.log('progress 삭제 시도:', progress.id);
            
            const { error: deleteProgressError } = await supabase
              .from('goal_progress')
              .delete()
              .eq('id', progress.id);
              
            if (deleteProgressError) {
              console.error('progress 삭제 오류:', deleteProgressError);
            }
          }
        }
      }
      
      // 3. smart_goals 테이블 삭제
      console.log('smart_goals 삭제 시도:', deleteTargetId);
      const { error } = await supabase
        .from('smart_goals')
        .delete()
        .eq('id', deleteTargetId);
        
      if (error) {
        console.error('smart_goals 삭제 오류:', error);
        if (error.message.includes('violates foreign key constraint')) {
          setError('외래 키 제약 조건으로 인해 삭제할 수 없습니다. 관련 데이터를 먼저 삭제해주세요.');
          throw new Error('외래 키 제약 조건 위반');
        }
        throw error;
      }
      
      console.log('삭제 성공');
      
      // 4. 로컬 스토리지에서 데이터 삭제 (마이그레이션 데이터가 있을 경우)
      localStorage.removeItem(`session_data_${deleteTargetId}`);
      
      // 5. UI 업데이트
      setSessions(sessions.filter(s => s.id !== deleteTargetId));
      setDeleteConfirmOpen(false);
      setDeleteTargetId(null);
    } catch (err: any) {
      console.error("세션 삭제 오류:", err.message);
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  // 세션 편집 시작 - 새로운 테이블 구조에 맞게 수정
  const handleEditStart = async (sessionId: string) => {
    // 세션 찾기
    const session = sessions.find(s => s.id === sessionId);
    if (!session) return;
      
    // 세션 기본 정보 설정
    let sessionData = {
      ...session,
      percent: session.percent || 0,
      reflection: session.reflection || ""
    };
      
    // 진행도 정보가 데이터베이스에 없는 경우 조회 시도
    if (!session.progress_id && (session.percent === 0 && session.reflection === "")) {
      try {
        // goal_progress 테이블에서 진행도 조회 시도
        const { data: progressData, error: progressError } = await supabase
          .from('goal_progress')
          .select('*')
          .eq('smart_goal_id', sessionId)
          .order('created_at', { ascending: false })
          .limit(1);
          
        if (!progressError && progressData && progressData.length > 0) {
          // 데이터베이스에서 최신 진행도 정보 가져오기
          sessionData = {
            ...sessionData,
            percent: progressData[0].percent,
            reflection: progressData[0].reflection,
            progress_id: progressData[0].id
          };
        } else {
          // 데이터베이스에 없는 경우 로컬 스토리지 확인
          const sessionDataKey = `session_data_${sessionId}`;
          const savedData = localStorage.getItem(sessionDataKey);
          
          if (savedData) {
            try {
              const parsedData = JSON.parse(savedData);
              sessionData = {
                ...sessionData,
                percent: parsedData.percent || 0,
                reflection: parsedData.reflection || ""
              };
              
              // 마이그레이션 대비 - 로컬 스토리지 데이터 아직 졸음
              if (parsedData.percent > 0 || parsedData.reflection) {
                console.log('편집 시작 중 로컬 데이터 발견:', sessionId);
              }
            } catch (e) {
              console.error('JSON 파싱 오류:', e);
            }
          }
        }
      } catch (e) {
        console.error('편집 시작 중 오류:', e);
      }
    }
    
    // 편집할 세션 설정
    setCurrentSession(sessionData);
    setEditingSessionId(sessionId);
  };

  // 세션 편집 취소
  const handleEditCancel = () => {
    setEditingSessionId(null);
    setCurrentSession(null);
  };

  return (
    <Box>
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
        <Typography variant="h6">학습 세션</Typography>
        <Button 
          variant="contained" 
          startIcon={<AddIcon />}
          onClick={() => setIsDialogOpen(true)}
          disabled={loading}
        >
          새 세션 추가
        </Button>
      </Box>

      {error && <Alert severity="error" sx={{ mb: 2 }}>{error}</Alert>}

      {loading && <CircularProgress size={24} sx={{ display: 'block', mx: 'auto', my: 2 }} />}

      <SessionList 
        sessions={sessions}
        onEdit={handleEditStart}
        onDelete={handleDeleteRequest}
        editingSessionId={editingSessionId}
        onUpdate={handleUpdateSession}
        loading={loading}
      />

      {/* 삭제 확인 다이얼로그 */}
      <Dialog open={deleteConfirmOpen} onClose={() => setDeleteConfirmOpen(false)}>
        <DialogTitle>정말로 삭제하시겠습니까?</DialogTitle>
        <DialogActions>
          <Button onClick={() => setDeleteConfirmOpen(false)} disabled={loading}>취소</Button>
          <Button onClick={handleDeleteSession} color="error" variant="contained" disabled={loading}>
            삭제
          </Button>
        </DialogActions>
      </Dialog>

      {/* 세션 추가 다이얼로그 */}
      <Dialog open={isDialogOpen} onClose={() => setIsDialogOpen(false)} fullWidth maxWidth="sm">
        <DialogTitle>새 학습 세션 추가</DialogTitle>
        <DialogContent>
          <FormControl fullWidth margin="normal">
            <InputLabel id="add-subject-label">과목</InputLabel>
            <Select
              labelId="add-subject-label"
              value={newSessionData?.subject || SUBJECTS[0]}
              onChange={(e) => setNewSessionData(prev => ({...prev, subject: e.target.value as string}))}
              label="과목"
            >
              {SUBJECTS.map(subject => (
                <MenuItem key={subject} value={subject}>{subject}</MenuItem>
              ))}
            </Select>
          </FormControl>
          
          <TextField
            margin="normal"
            label="학습 내용"
            fullWidth
            multiline
            rows={4}
            value={newSessionData?.description || ""}
            onChange={(e) => setNewSessionData(prev => ({...prev, description: e.target.value}))}
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setIsDialogOpen(false)} disabled={loading}>취소</Button>
          <Button 
            onClick={() => {
              if (newSessionData) {
                handleAddSession(newSessionData);
              }
            }} 
            color="primary" 
            variant="contained" 
            disabled={loading || !newSessionData?.subject || !newSessionData?.description}
          >
            {loading ? <CircularProgress size={24} /> : "추가"}
          </Button>
        </DialogActions>
      </Dialog>

      {/* 세션 편집 다이얼로그 */}
      {currentSession && (
        <Dialog open={editingSessionId !== null} onClose={handleEditCancel} fullWidth maxWidth="sm">
          <DialogTitle>세션 수정</DialogTitle>
          <DialogContent>
            <FormControl fullWidth margin="normal">
              <InputLabel id="edit-subject-label">과목</InputLabel>
              <Select
                labelId="edit-subject-label"
                value={currentSession.subject}
                onChange={(e) => setCurrentSession(prev => 
                  prev ? {...prev, subject: e.target.value as string} : null
                )}
                label="과목"
              >
                {SUBJECTS.map(subject => (
                  <MenuItem key={subject} value={subject}>{subject}</MenuItem>
                ))}
              </Select>
            </FormControl>
            
            <TextField
              margin="normal"
              label="학습 내용"
              fullWidth
              multiline
              rows={4}
              value={currentSession.description}
              onChange={(e) => setCurrentSession(prev => 
                prev ? {...prev, description: e.target.value} : null
              )}
            />

            <Box sx={{ mt: 3, mb: 1 }}>
              <Typography id="percent-slider" gutterBottom>
                달성도: {currentSession.percent}%
              </Typography>
              <Slider
                value={currentSession.percent || 0}
                onChange={(_, newValue) => setCurrentSession(prev => 
                  prev ? {...prev, percent: newValue as number} : null
                )}
                aria-labelledby="percent-slider"
                valueLabelDisplay="auto"
                step={5}
                marks
                min={0}
                max={100}
              />
            </Box>

            <TextField
              margin="normal"
              label="학습 반성"
              fullWidth
              multiline
              rows={4}
              value={currentSession.reflection}
              onChange={(e) => setCurrentSession(prev => 
                prev ? {...prev, reflection: e.target.value} : null
              )}
              placeholder="이번 학습에서 어려웠던 점과 개선할 점을 적어보세요."
            />
          </DialogContent>
          <DialogActions>
            <Button onClick={handleEditCancel} disabled={loading}>취소</Button>
            <Button 
              onClick={() => {
                if (currentSession) {
                  handleUpdateSession(currentSession.id, {
                    subject: currentSession.subject,
                    description: currentSession.description,
                    percent: currentSession.percent || 0,
                    reflection: currentSession.reflection || ''
                  });
                }
              }}
              color="primary" 
              variant="contained" 
              disabled={loading || !currentSession.subject || !currentSession.description}
            >
              {loading ? <CircularProgress size={24} /> : "저장"}
            </Button>
          </DialogActions>
        </Dialog>
      )}
    </Box>
  );
}
